import tensorflow as tf
import keras
from keras import models
from keras import layers
import numpy as np
import sklearn

dataX = [8, 5, 10, 5, 8, 2, 6, 10, 7, 9, 9, 10, 3, 5, 8, 8, 10, 10, 1, 1, 2, 5, 5, 4, 10, 2, 4, 1, 9, 1, 4, 4, 10, 1, 3, 1, 9, 4, 9, 2, 3, 10, 6, 8, 5, 8, 10, 6, 10, 3, 3, 4, 3, 4, 4, 8, 5, 4, 9, 10, 3, 2, 8, 2, 2, 6, 8, 3, 7, 10, 1, 6, 5, 5, 6, 10, 8, 9, 5, 2, 4, 8, 10, 4, 3, 2, 10, 4, 9, 8, 10, 7, 5, 4, 1, 8, 1, 4, 3, 10, 2, 7, 9, 5, 8, 3, 9, 8, 6, 2, 10, 6, 4, 4, 1, 5, 7, 7, 7, 2, 10, 1, 1, 10, 8, 1, 5, 6, 6, 7, 9, 2, 5, 8, 10, 6, 9, 4, 3, 4, 4, 10, 9, 1, 3, 4, 1, 5, 4, 5, 10, 1, 6, 5, 3, 1, 5, 1, 7, 5, 10, 1, 7, 10, 3, 8, 10, 5, 9, 5, 8, 8, 9, 1, 7, 1, 5, 2, 10, 1, 2, 9, 7, 1, 9, 3, 10, 7, 5, 3, 3, 7, 7, 8, 1, 2, 7, 3, 1, 8, 7, 5, 10, 3, 10, 1, 2, 7, 3, 10, 6, 2, 6, 10, 6, 7, 10, 7, 9, 8, 2, 8, 7, 5, 1, 3, 7, 8, 10, 10, 4, 7, 1, 3, 6, 4, 9, 6, 6, 7, 5, 3, 3, 10, 6, 7, 5, 10, 10, 7, 9, 5, 2, 5, 7, 3, 4, 2, 8, 4, 9, 4, 5, 2, 4, 8, 5, 10, 5, 4, 2, 9, 6, 10, 5, 6, 7, 1, 2, 8, 1, 7, 2, 5, 7, 1, 7, 7, 8, 10, 9, 7, 3, 5, 3, 4, 7, 1, 6, 6, 10, 3, 2, 2, 9, 1, 6, 9, 4, 1, 6, 10, 7, 4, 8, 4, 7, 6, 5, 3, 2, 6, 2, 5, 10, 8, 2, 8, 2, 8, 6, 2, 2, 5, 8, 2, 4, 9, 6, 6, 7, 1, 7, 4, 9, 10, 3, 3, 6, 4, 10, 2, 3, 1, 6, 7, 3, 9, 1, 3, 9, 6, 9, 6, 7, 4, 8, 3, 2, 10, 10, 3, 8, 7, 6, 10, 3, 7, 2, 7, 3, 3, 3, 1, 7, 8, 9, 1, 10, 1, 5, 7, 9, 2, 2, 9, 8, 8, 5, 6, 2, 4, 5, 6, 3, 9, 6, 10, 7, 4, 7, 1, 4, 5, 9, 7, 2, 1, 5, 3, 5, 3, 8, 1, 3, 6, 1, 1, 1, 6, 4, 8, 9, 3, 5, 2, 9, 6, 2, 3, 5, 4, 7, 9, 4, 7, 8, 1, 2, 5, 7, 1, 9, 10, 9, 7, 5, 6, 4, 8, 5, 8, 5, 10, 8, 1, 5, 9, 1, 9, 6, 1, 8, 6, 2, 4, 4, 10, 10, 1, 4, 7, 7, 9, 5, 2, 9, 10, 1, 9, 4, 8, 10, 3, 6, 6, 9, 8, 5, 10, 8, 5, 1, 1, 5, 2, 1, 3, 6, 7, 4, 3, 7, 4, 8, 8, 10, 9, 5, 4, 7, 3, 2, 1, 1, 5, 8, 5, 8, 10, 6, 3, 2, 2, 3, 9, 9, 10, 5, 3, 1, 9, 3, 9, 6, 4, 2, 3, 5, 1, 9, 10, 5, 5, 1, 9, 7, 8, 3, 2, 1, 5, 3, 7, 10, 3, 1, 7, 7, 2, 5, 6, 10, 8, 3, 4, 4, 6, 5, 9, 9, 9, 9, 3, 8, 10, 6, 3, 1, 3, 2, 4, 5, 7, 5, 1, 10, 3, 9, 3, 2, 3, 2, 8, 8, 10, 3, 4, 2, 10, 4, 2, 10, 8, 7, 6, 10, 2, 6, 6, 2, 10, 10, 6, 8, 2, 6, 8, 6, 4, 3, 6, 6, 2, 10, 6, 9, 10, 9, 10, 9, 8, 3, 9, 10, 2, 7, 8, 10, 10, 7, 6, 4, 9, 3, 7, 10, 4, 6, 6, 3, 1, 5, 3, 1, 6, 4, 4, 8, 8, 5, 9, 6, 8, 4, 3, 1, 4, 2, 5, 10, 6, 3, 6, 5, 8, 10, 5, 8, 4, 9, 1, 4, 7, 6, 2, 6, 8, 5, 8, 2, 5, 8, 3, 2, 5, 7, 9, 9, 7, 7, 5, 3, 3, 6, 6, 2, 8, 10, 7, 5, 8, 9, 8, 5, 8, 5, 10, 3, 1, 4, 10, 4, 7, 10, 8, 1, 3, 5, 3, 3, 8, 4, 7, 8, 10, 7, 2, 7, 6, 5, 5, 1, 8, 10, 9, 5, 8, 5, 3, 7, 4, 6, 2, 4, 9, 8, 10, 1, 1, 6, 5, 4, 6, 9, 9, 6, 5, 5, 8, 8, 3, 7, 6, 1, 1, 2, 1, 4, 8, 4, 6, 9, 10, 6, 4, 2, 6, 3, 1, 9, 3, 2, 9, 2, 1, 9, 3, 6, 6, 6, 4, 9, 4, 10, 3, 1, 6, 6, 8, 10, 5, 9, 7, 6, 1, 2, 4, 5, 2, 10, 8, 10, 7, 8, 4, 6, 10, 4, 6, 7, 8, 8, 6, 10, 7, 3, 4, 2, 8, 2, 6, 3, 7, 1, 2, 9, 4, 2, 1, 6, 4, 3, 8, 2, 8, 9, 1, 10, 4, 1, 10, 9, 7, 10, 8, 1, 7, 2, 5, 3, 8, 10, 5, 1, 1, 4, 1, 5, 9, 6, 1, 10, 7, 9, 5, 7, 1, 5, 5, 7, 1, 9, 7, 1, 4, 6, 9, 6, 8, 9, 9, 1, 6, 8, 9, 9, 4, 7, 10, 6, 8, 1, 3, 5, 1, 5, 7, 3, 8, 3, 2, 3, 5, 3, 2, 4, 7, 1, 1, 4, 2, 9, 6, 10, 2, 9, 1, 3, 8, 5, 3, 4, 2, 9, 6, 1, 1, 9, 9, 4, 5, 10, 6, 5, 2, 7, 2, 6, 3, 10, 2, 8, 4, 9, 5, 4, 1, 5, 1, 10, 4, 9, 10, 3, 2, 6, 3, 6, 7, 6, 7, 5, 2, 7, 6, 1, 9, 9, 4, 65, 49, 88, 68, 80, 33, 35, 91, 76, 65, 78, 75, 37, 70, 37, 85, 90, 16, 30, 68, 48, 61, 41, 41, 97, 81, 15, 54, 20, 96, 27, 45, 70, 72, 29, 40, 46, 51, 78, 43, 94, 88, 90, 79, 47, 51, 100, 17, 95, 34, 93, 71, 78, 36, 60, 92, 94, 14, 93, 83, 51, 60, 45, 49, 14, 53, 71, 17, 56, 82, 21, 79, 72, 58, 92, 21, 22, 50, 74, 30, 81, 38, 39, 86, 22, 15, 86, 96, 30, 61, 67, 20, 66, 25, 91, 68, 100, 36, 73, 68, 58, 28, 53, 22, 22, 58, 14, 64, 83, 79, 75, 98, 36, 72, 59, 43, 53, 72, 99, 84, 76, 18, 12, 35, 29, 26, 65, 51, 47, 40, 34, 29, 24, 52, 46, 80, 88, 17, 86, 77, 69, 50, 38, 49, 45, 43, 16, 28, 34, 22, 90, 81, 68, 65, 83, 79, 79, 54, 33, 98, 14, 66, 90, 30, 70, 33, 21, 66, 12, 56, 96, 55, 70, 54, 80, 53, 96, 99, 11, 46, 56, 86, 44, 73, 96, 67, 62, 11, 83, 37, 97, 13, 99, 32, 31, 60, 38, 74, 74, 44, 90, 87, 50, 23, 89, 36, 11, 56, 54, 60, 48, 13, 62, 63, 53, 69, 34, 28, 55, 95, 15, 93, 74, 39, 94, 13, 54, 38, 91, 54, 73, 21, 24, 36, 88, 45, 76, 86, 45, 23, 84, 37, 85, 83, 95, 35, 14, 22, 16, 54, 93, 59, 85, 16, 100, 30, 84, 43, 22, 25, 13, 25, 34, 11, 22, 85, 71, 88, 34, 95, 93, 76, 46, 50, 24, 96, 55, 88, 54, 89, 98, 38, 92, 91, 50, 87, 80, 39, 12, 64, 43, 88, 94, 97, 17, 99, 27, 58, 34, 78, 34, 94, 35, 46, 58, 55, 84, 92, 19, 45, 48, 61, 95, 63, 69, 95, 81, 21, 80, 80, 80, 32, 93, 68, 79, 66, 53, 86, 100, 78, 19, 42, 22, 28, 96, 64, 20, 46, 18, 94, 36, 63, 52, 98, 27, 42, 58, 90, 76, 24, 89, 17, 68, 12, 20, 16, 45, 85, 88, 44, 80, 41, 63, 18, 88, 33, 30, 13, 20, 72, 21, 61, 90, 91, 29, 31, 75, 15, 54, 84, 78, 95, 20, 42, 38, 40, 58, 70, 47, 93, 12, 72, 43, 43, 26, 43, 63, 45, 12, 31, 36, 20, 100, 70, 87, 100, 95, 38, 19, 63, 36, 59, 28, 74, 56, 74, 68, 17, 83, 71, 67, 63, 74, 34, 97, 40, 42, 31, 84, 40, 71, 36, 53, 30, 59, 68, 70, 43, 59, 96, 80, 92, 37, 76, 13, 62, 84, 19, 100, 13, 17, 38, 50, 16, 93, 25, 56, 92, 45, 53, 35, 16, 81, 66, 89, 98, 80, 99, 64, 24, 95, 60, 71, 17, 61, 33, 50, 65, 83, 75, 19, 36, 53, 79, 14, 55, 77, 35, 61, 87, 18, 60, 12, 25, 95, 47, 82, 54, 50, 26, 56, 78, 73, 91, 86, 77, 91, 61, 71, 42, 58, 96, 96, 49, 45, 87, 28, 52, 78, 64, 99, 15, 31, 28, 28, 85, 13, 43, 49, 25, 73, 89, 46, 69, 89, 92, 92, 34, 92, 96, 18, 68, 70, 11, 85, 38, 100, 20, 51, 14, 69, 16, 25, 68, 75, 44, 24, 73, 23, 47, 96, 71, 89, 99, 65, 30, 45, 39, 56, 86, 81, 12, 39, 52, 70, 70, 35, 68, 52, 69, 92, 66, 80, 58, 29, 38, 20, 50, 45, 41, 64, 84, 60, 89, 40, 39, 43, 46, 16, 78, 55, 85, 62, 23, 48, 39, 53, 20, 94, 21, 50, 78, 81, 74, 34, 33, 84, 47, 85, 66, 67, 69, 27, 29, 70, 61, 92, 73, 62, 65, 23, 81, 23, 65, 43, 21, 85, 60, 24, 70, 86, 82, 30, 84, 16, 16, 91, 78, 75, 71, 61, 18, 71, 81, 78, 86, 41, 79, 64, 38, 33, 20, 65, 31, 42, 82, 13, 32, 67, 95, 92, 25, 33, 94, 48, 56, 63, 38, 21, 90, 53, 11, 92, 70, 63, 55, 38, 78, 34, 73, 95, 86, 50, 87, 81, 65, 50, 42, 47, 69, 56, 16, 35, 53, 72, 96, 11, 43, 86, 33, 82, 70, 42, 80, 31, 73, 90, 87, 98, 82, 39, 49, 41, 97, 15, 70, 24, 18, 86, 37, 92, 92, 91, 83, 31, 23, 42, 60, 68, 22, 98, 21, 40, 80, 47, 96, 30, 86, 19, 46, 68, 90, 46, 25, 95, 80, 84, 60, 82, 59, 35, 11, 58, 57, 19, 23, 64, 12, 84, 28, 76, 99, 23, 68, 38, 82, 41, 66, 26, 83, 21, 93, 18, 72, 61, 29, 65, 20, 47, 99, 37, 29, 70, 33, 74, 98, 40, 40, 62, 36, 41, 59, 35, 66, 70, 29, 46, 36, 45, 100, 69, 85, 90, 69, 69, 38, 14, 78, 59, 78, 85, 44, 71, 25, 31, 97, 92, 79, 33, 44, 83, 45, 17, 94, 18, 81, 66, 59, 64, 55, 66, 57, 14, 12, 28, 41, 35, 77, 50, 85, 45, 28, 48, 43, 20, 51, 30, 70, 18, 25, 61, 48, 31, 71, 37, 99, 31, 79, 75, 79, 74, 97, 78, 28, 50, 58, 86, 62, 28, 44, 39, 43, 99, 44, 83, 100, 61, 45, 73, 23, 89, 67, 41, 81, 74, 78, 82, 16, 23, 34, 46, 73, 12, 66, 98, 37, 78, 25, 18, 16, 38, 91, 36, 62, 47, 71, 19, 77, 56, 85, 31, 11, 66, 11, 93, 53, 39, 16, 91, 26, 90, 64, 75, 24, 98, 55, 67, 15, 31, 19, 96, 36, 96, 19, 85, 74, 79, 13, 88, 43, 34, 15, 79, 87, 53, 51, 15, 94, 26, 73, 41, 43, 45, 31, 97, 42, 82, 91, 17, 36, 21, 66, 13, 93, 47, 99, 52, 57, 76, 67, 16, 96, 84, 42, 73, 15, 28, 64, 22, 38, 33, 19, 25, 71, 78, 61, 19, 32, 90, 100]
dataY = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]

model = models.Sequential()
model.add(layers.Dense(12, input_dim=1, activation='relu'))
model.add(layers.Dense(8, activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='adam', metrics=['accuracy'])

model.fit(dataX, dataY, epochs=20, batch_size=50, verbose=1)
model.save('models/num_model.h5')


from keras import backend as K
from keras.models import load_model
from tensorflow.python.saved_model import builder as saved_model_builder
from tensorflow.python.saved_model.signature_def_utils import predict_signature_def
from tensorflow.python.saved_model import tag_constants

output_dir = './models/NumModel/2'
K.set_learning_phase(0) # Ignore dropout at inference
keras_model = load_model('models/num_model.h5')
print(keras_model.input)
print(keras_model.output)

# builder = saved_model_builder.SavedModelBuilder(output_dir)
# print(output_dir)
# signature = predict_signature_def(inputs={"images": keras_model.input},
#                                   outputs={"scores": keras_model.output})

# with K.get_session() as sess:
#     builder.add_meta_graph_and_variables(sess=sess, tags=[tag_constants.SERVING],
#                                          signature_def_map={"predict": signature})
# builder.save()
with K.get_session() as sess:
    tf.saved_model.simple_save(
        sess,
        output_dir,
        inputs={'input_image': model.input},
        outputs={t.name:t for t in model.outputs})